## 错误的思路

如果从左往右地把 $\textit{nums}_2$ 合并到 $\textit{nums}_1$ 中，假设 $\textit{nums}_2[0] < \textit{nums}_1[0]$，那么 $\textit{nums}_2[0]$ 会直接覆盖掉 $\textit{nums}_1[0]$，这不是我们期望看到的。

## 正确的思路

如果从右往左地把 $\textit{nums}_2$ 合并到 $\textit{nums}_1$ 中，是否会发生错误的覆盖呢？我们来看几个例子：

- $\textit{nums}_1=[1,2,3,*,*,*], \textit{nums}_2=[4,5,6]$。这里我用 $*$ 表示可以填入的空位。在这个例子中，$\textit{nums}_2$ 可以直接填入 $\textit{nums}_1$ 后面的 $3$ 个空位，得到 $[1,2,3,4,5,6]$，没有任何错误覆盖。
- $\textit{nums}_1=[1,2,6,*,*,*], \textit{nums}_2=[3,4,5]$。这里 $\textit{nums}_1$ 中的 $6$ 是最大的，应当填入末尾。现在 $\textit{nums}_1=[1,2,*,*,*,6]$，注意 $\textit{nums}_1[2]$ 这个位置现在空出了。然后把 $\textit{nums}_2$ 中的数字填入空位，得到 $[1,2,3,4,5,6]$，没有任何错误覆盖。
- 上面的例子表明，把 $\textit{nums}_1$ 中的数字**移到另一个空位，又产生了一个新的空位，所以剩余空位的个数是不变的**，我们总是有空位可以让 $\textit{nums}_2$ 的数字填入，不会发生错误覆盖，这是如下算法正确的前提。

## 算法

1. 初始化三个指针 $p_1=m-1$ 指向 $\textit{nums}_1$ 的末尾，$p_2=n-1$ 指向 $\textit{nums}_2$ 的末尾，$p=m+n-1$ 指向合并后的数组末尾。
2. 不断比较 $\textit{nums}_1[p_1]$ 和 $\textit{nums}_2[p_2]$ 的大小，将较大的值放入 $\textit{nums}_1[p]$。如果 $p_1\ge 0$ 且 $\textit{nums}_1[p_1]$ 更大，那么放入后 $p_1$ 和 $p$ 减一，否则 $p_2$ 和 $p$ 减一。注意 $\textit{nums}_1[p_1]=\textit{nums}_2[p_2]$ 时放入谁都可以，不妨规定放入 $\textit{nums}_2[p_2]$。这样在数组元素都相等的情况下，只需要把 $\textit{nums}_2$ 的数据填入 $\textit{nums}_1$ 中，效率更高。
3. 循环直到 $p_2<0$，此时 $\textit{nums}_2$ 的所有元素均已填入 $\textit{nums}_1$。你可能会想，如果 $\textit{nums}_1$ 还有元素没有移动呢？注意到当 $\textit{nums}_2$ 都合并到 $\textit{nums}_1$ 时，$\textit{nums}_1$ 剩余未移动的元素，它要移动的目标位置就是它自己所处的位置，所以无需移动，合并完毕。这可以算作一个小优化，比如 $\textit{nums}_1=[1,2,3,*,*,*], \textit{nums}_2=[4,5,6]$，其实只要把 $\textit{nums}_2$ 的所有数都填入 $\textit{nums}_1$ 中，合并就已经结束了，即便此时 $p_1=2$ 仍然 $\ge 0$。

* [sol-Python3]

```py
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        p1, p2, p = m - 1, n - 1, m + n - 1
        while p2 >= 0:  # nums2 还有要合并的元素
            # 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
            if p1 >= 0 and nums1[p1] > nums2[p2]:
                nums1[p] = nums1[p1]  # 填入 nums1[p1]
                p1 -= 1
            else:
                nums1[p] = nums2[p2]  # 填入 nums2[p1]
                p2 -= 1
            p -= 1  # 下一个要填入的位置
```

* [sol-Java]

```java
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 = m - 1;
        int p2 = n - 1;
        int p = m + n - 1;
        while (p2 >= 0) { // nums2 还有要合并的元素
            // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
            if (p1 >= 0 && nums1[p1] > nums2[p2]) {
                nums1[p--] = nums1[p1--]; // 填入 nums1[p1]
            } else {
                nums1[p--] = nums2[p2--]; // 填入 nums2[p1]
            }
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int p1 = m - 1, p2 = n - 1, p = m + n - 1;
        while (p2 >= 0) { // nums2 还有要合并的元素
            // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
            if (p1 >= 0 && nums1[p1] > nums2[p2]) {
                nums1[p--] = nums1[p1--]; // 填入 nums1[p1]
            } else {
                nums1[p--] = nums2[p2--]; // 填入 nums2[p1]
            }
        }
    }
};
```

* [sol-C]

```c
// 入参 nums1Size 和 nums2Size 是多余的
void merge(int* nums1, int, int m, int* nums2, int, int n) {
    int p1 = m - 1, p2 = n - 1, p = m + n - 1;
    while (p2 >= 0) { // nums2 还有要合并的元素
        // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
        if (p1 >= 0 && nums1[p1] > nums2[p2]) {
            nums1[p--] = nums1[p1--]; // 填入 nums1[p1]
        } else {
            nums1[p--] = nums2[p2--]; // 填入 nums2[p2]
        }
    }
}
```

* [sol-Go]

```go
func merge(nums1 []int, m int, nums2 []int, n int) {
    p1, p2, p := m-1, n-1, m+n-1
    for p2 >= 0 { // nums2 还有要合并的元素
        // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
        if p1 >= 0 && nums1[p1] > nums2[p2] {
            nums1[p] = nums1[p1] // 填入 nums1[p1]
            p1--
        } else {
            nums1[p] = nums2[p2] // 填入 nums2[p1]
            p2--
        }
        p-- // 下一个要填入的位置
    }
}
```

* [sol-JavaScript]

```js
var merge = function(nums1, m, nums2, n) {
    let p1 = m - 1, p2 = n - 1, p = m + n - 1;
    while (p2 >= 0) { // nums2 还有要合并的元素
        // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
        if (p1 >= 0 && nums1[p1] > nums2[p2]) {
            nums1[p--] = nums1[p1--]; // 填入 nums1[p1]
        } else {
            nums1[p--] = nums2[p2--]; // 填入 nums2[p1]
        }
    }
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {
        let m = m as usize;
        let n = n as usize;
        let mut p1 = m - 1;
        let mut p2 = n - 1;
        let mut p = m + n - 1;
        while p2 < n { // nums2 还有要合并的元素
            // 如果 p1 < 0，那么走 else 分支，把 nums2 合并到 nums1 中
            if p1 < m && nums1[p1] > nums2[p2] {
                nums1[p] = nums1[p1]; // 填入 nums1[p1]
                p1 -= 1;
            } else {
                nums1[p] = nums2[p2]; // 填入 nums2[p2]
                p2 -= 1;
            }
            p -= 1;
        }
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(m+n)$。最坏情况形如 $\textit{nums}_1=[4,5,6,*,*,*],\textit{nums}_2=[1,2,3]$，每个数都需要移动一次。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
